// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: org.proto

package org

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrgClient is the client API for Org service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgClient interface {
	CreateOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgResponse, error)
	GetOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgPayload, error)
	UpdateOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgResponse, error)
	DeleteOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgResponse, error)
}

type orgClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgClient(cc grpc.ClientConnInterface) OrgClient {
	return &orgClient{cc}
}

func (c *orgClient) CreateOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgResponse, error) {
	out := new(OrgResponse)
	err := c.cc.Invoke(ctx, "/Org/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgPayload, error) {
	out := new(OrgPayload)
	err := c.cc.Invoke(ctx, "/Org/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgResponse, error) {
	out := new(OrgResponse)
	err := c.cc.Invoke(ctx, "/Org/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteOrg(ctx context.Context, in *OrgPayload, opts ...grpc.CallOption) (*OrgResponse, error) {
	out := new(OrgResponse)
	err := c.cc.Invoke(ctx, "/Org/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServer is the server API for Org service.
// All implementations must embed UnimplementedOrgServer
// for forward compatibility
type OrgServer interface {
	CreateOrg(context.Context, *OrgPayload) (*OrgResponse, error)
	GetOrg(context.Context, *OrgPayload) (*OrgPayload, error)
	UpdateOrg(context.Context, *OrgPayload) (*OrgResponse, error)
	DeleteOrg(context.Context, *OrgPayload) (*OrgResponse, error)
	mustEmbedUnimplementedOrgServer()
}

// UnimplementedOrgServer must be embedded to have forward compatible implementations.
type UnimplementedOrgServer struct {
}

func (UnimplementedOrgServer) CreateOrg(context.Context, *OrgPayload) (*OrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (UnimplementedOrgServer) GetOrg(context.Context, *OrgPayload) (*OrgPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (UnimplementedOrgServer) UpdateOrg(context.Context, *OrgPayload) (*OrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (UnimplementedOrgServer) DeleteOrg(context.Context, *OrgPayload) (*OrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (UnimplementedOrgServer) mustEmbedUnimplementedOrgServer() {}

// UnsafeOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServer will
// result in compilation errors.
type UnsafeOrgServer interface {
	mustEmbedUnimplementedOrgServer()
}

func RegisterOrgServer(s grpc.ServiceRegistrar, srv OrgServer) {
	s.RegisterService(&Org_ServiceDesc, srv)
}

func _Org_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Org/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateOrg(ctx, req.(*OrgPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Org/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrg(ctx, req.(*OrgPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Org/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateOrg(ctx, req.(*OrgPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Org/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteOrg(ctx, req.(*OrgPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// Org_ServiceDesc is the grpc.ServiceDesc for Org service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Org_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Org",
	HandlerType: (*OrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrg",
			Handler:    _Org_CreateOrg_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _Org_GetOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _Org_UpdateOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _Org_DeleteOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org.proto",
}
